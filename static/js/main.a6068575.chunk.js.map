{"version":3,"sources":["res/logo.svg","components/Login/signup.js","components/Login/signin.js","components/Login/login.js","components/Chat/chat.js","App.js","serviceWorker.js","index.js","res/applogo.svg"],"names":["module","exports","__webpack_require__","p","Signup","state","emailUp","passwordUp","confirmPasswordUp","displayName","handleChange","e","_this","setState","Object","defineProperty","target","id","value","handleSubmit","_this$state","console","log","props","onSignUp","react_default","a","createElement","Segment","padded","className","Header","as","Form","onSubmit","this","Field","Icon","name","placeholder","onChange","type","style","textAlign","Button","secondary","React","Component","SignIn","email","password","onSignIn","Box","color","Image","src","appLogo","inverted","compact","Grid","columns","Column","Login_signin","Divider","vertical","left","Login_signup","Login","height","verticalAlign","login_Box","Message","alignment","showDisplayName","sentBy","join","message","timeSent","toLocaleString","ConversationCard","selected","onClick","handleClick","cid","size","icon","members","Chat","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","componentDidUpdate","prevProps","prevState","elem","document","getElementById","scrollTop","scrollHeight","conversationRef","messageUnsubscribe","unsubscribe","databaseRef","collection","doc","orderBy","startAt","fetchTimestamp","onSnapshot","snapshot","docs","docChanges","forEach","change","metadata","hasPendingWrites","messages","toConsumableArray","concat","data","toDate","uid","componentWillUnmount","showMessages","messagesRef","messageObjects","limit","initLoadMessages","get","then","querySnapshot","length","i","push","Date","lastLoadedDocTimestamp","partialLoad","catch","err","loadMoreMessages","slice","nextLoad","unshift","sendMessage","messageRef","preventDefault","input","timestamp","messageData","user","add","showAddConvPopUp","addConv","membersToAdd","handleAddEmail","emailEntered","find","member","where","handleAddConversation","lastActive","lastMessage","update","conversations","firebaseRef","firestore","FieldValue","arrayUnion","error","addSuccess","database","_this2","promises","Promise","all","sort","b","_this3","displayMembers","Label","map","key","popup","Input","width","circular","link","SegmentGroup","messageObject","chat_Message","conversation","chat_ConversationCard","onSignOut","autoComplete","fluid","LoadingScreen","alt","logo","App","handleSignIn","firebase","auth","signInWithEmailAndPassword","userData","signIn","handleSignUp","userName","createUserWithEmailAndPassword","updateProfile","set","handleSignOut","signOut","authChecked","settings","timestampsInSnapshots","onAuthStateChanged","scene","Chat_chat","Login_login","App_LoadingScreen","Boolean","window","location","hostname","match","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a6068575.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.b0ae2d50.svg\";","import React from 'react';\r\nimport { Segment, Header, Form, Button, Icon } from 'semantic-ui-react';\r\nimport './signup.css'\r\n\r\nclass Signup extends React.Component {\r\n    state = { emailUp: '', passwordUp: '', confirmPasswordUp: '', displayName:'' }\r\n\r\n    handleChange = (e) => this.setState({ [e.target.id]: e.target.value })\r\n  \r\n    handleSubmit = () => {\r\n      \r\n      const { emailUp, passwordUp, confirmPasswordUp, displayName } = this.state\r\n      console.log(emailUp)\r\n      if (passwordUp === confirmPasswordUp){\r\n        this.props.onSignUp(emailUp, passwordUp, displayName);\r\n      }\r\n    }\r\n    render() { \r\n        return (\r\n            <div id='signup'>\r\n                <Segment padded='very'>\r\n                    <div className='borders'>\r\n                        <Header as='h1'>Signup</Header>\r\n                        <Form onSubmit={this.handleSubmit}>\r\n                            <Form.Field>\r\n                                <label><Icon name='user' /> Display Name</label>\r\n                                <input className='field' placeholder='John' id='displayName' onChange={this.handleChange}/>\r\n                            </Form.Field>\r\n                            <Form.Field>\r\n                                <label><Icon name='mail' /> Email</label>\r\n                                <input className='field' type='email' id='emailUp' placeholder='john123@email.com' onChange={this.handleChange}/>\r\n                            </Form.Field>\r\n                            <Form.Field>\r\n                                <label><Icon name='key' /> Password</label>\r\n                                <input className='field' type='password' id='passwordUp' placeholder='Password' onChange={this.handleChange} />\r\n                            </Form.Field>\r\n                            <Form.Field>\r\n                                <label><Icon name='key' /> Confirm Password</label>\r\n                                <input className='field' type='password' id='confirmPasswordUp' placeholder='Password' onChange={this.handleChange}/>\r\n                            </Form.Field>\r\n                            <div style={{ textAlign:'center' }}>\r\n                                <Button secondary>Signup</Button>\r\n                            </div>\r\n                        </Form>\r\n                    </div>\r\n                </Segment>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n \r\nexport default Signup;","import React from 'react';\r\nimport { Segment, Header, Form, Button, Icon } from 'semantic-ui-react';\r\nimport './signin.css'\r\n\r\nclass SignIn extends React.Component {\r\n    state = { email: '', password: '' }\r\n\r\n    handleChange = (e) => this.setState({ [e.target.id]: e.target.value })\r\n  \r\n    handleSubmit = () => {\r\n      const { email, password } = this.state\r\n      if (email && password){\r\n        this.props.onSignIn(email, password);\r\n      }\r\n    }\r\n    render() { \r\n        return (\r\n            <div id='login'>\r\n                <Segment padded='very'>\r\n                    <div className='borders'>\r\n                        <Header as='h1'>Login</Header>\r\n                        <Form onSubmit={this.handleSubmit}>\r\n                            <Form.Field>\r\n                                <label><Icon name='mail' /> Email</label>\r\n                                <input className='field' placeholder='john123@email.com' id='email' value={this.state.email} onChange={this.handleChange}/>\r\n                            </Form.Field>\r\n                            <Form.Field>\r\n                                <label><Icon name='key' /> Password</label>\r\n                                <input className='field' type='password' placeholder='Password' id='password' value={this.state.password} onChange={this.handleChange} />\r\n                            </Form.Field>\r\n                            <div style={{ textAlign:'center' }}>\r\n                                <Button secondary>Login</Button>\r\n                            </div>\r\n                        </Form>\r\n                    </div>\r\n                </Segment>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n \r\nexport default SignIn;","import React from 'react'\r\nimport { Segment, Grid, Divider, Header, Image } from 'semantic-ui-react'\r\nimport './login.css'\r\nimport Signup from './signup'\r\nimport SignIn from './signin'\r\nimport appLogo from '../../res/applogo.svg'\r\n\r\nconst Box = props => (\r\n    <div>\r\n        <Header color='teal' as='h1' textAlign='center'>\r\n            <Image src={appLogo}/>Node Messenger\r\n        </Header>\r\n        <Segment inverted color='black' compact padded='very'>\r\n            <Grid columns={2}>\r\n                <Grid.Column>\r\n                    <SignIn onSignIn={props.onSignIn} />\r\n                </Grid.Column>\r\n                <Divider inverted color='white' vertical style={{ left: '50%' }}>Or</Divider>\r\n                <Grid.Column>\r\n                    <Signup onSignUp={props.onSignUp}/>\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Segment>\r\n    </div>\r\n)\r\n\r\nconst Login = props => (\r\n    <header className='App-header'>\r\n        <Grid style={{height: '100%'}} verticalAlign='middle'>\r\n            <Grid.Column>\r\n                <div id='box'>\r\n                    <Box onSignIn={props.onSignIn} onSignUp={props.onSignUp}/>\r\n                </div>\r\n            </Grid.Column>\r\n        </Grid>\r\n    </header>\r\n)\r\n    \r\n \r\nexport default Login","import React from 'react'\r\nimport { Form, Input, Icon, Header, Image, Divider, Label, Segment, SegmentGroup, Button } from 'semantic-ui-react'\r\nimport './chat.css'\r\nimport appLogo from '../../res/applogo.svg'\r\n\r\n\r\nconst Message = props => (\r\n    // access props.sentBy to get the name of the person who sent the message\r\n    // access props.timeSent to get the time the message was sent\r\n\r\n  <div>\r\n      \r\n      <div id=\"name\" className={props.alignment}>\r\n      \r\n          {props.showDisplayName ? props.sentBy: ''}\r\n          \r\n      </div>\r\n      <div>\r\n      <div className={[props.alignment, \"message\"].join(' ')}>\r\n      \r\n      <div id='message-data' className={props.alignment==='r' ? \"userColor\":\"otherColor\"}>\r\n      {props.message}</div>\r\n      <div id=\"timeShow\" className={props.alignment==='r' ? \"timeL\":\"r\"}>\r\n      {props.timeSent.toLocaleString()}\r\n      </div>\r\n</div>\r\n\r\n      </div>\r\n      \r\n      \r\n\r\n      \r\n  </div>\r\n)\r\n\r\nconst ConversationCard = props => (\r\n    <div className='conversation-card' id={props.selected ? 'conversation-card-selected': ''} onClick={() => props.handleClick(props.cid)}>\r\n        <div id='conversation-icon'><Icon size='big' name={props.icon}/></div>\r\n        <div id='conversation-info'>\r\n            <Header>{props.members}</Header>\r\n        </div>\r\n    </div>\r\n)\r\n\r\n/**\r\n * \r\n */\r\nclass Chat extends React.Component {\r\n    constructor(props) {\r\n\r\n        super(props)\r\n\t\tconsole.log(this.props.user)\r\n\t\tthis.state = { \r\n            conversations: [],                  //stores the conversation metadata for this user\r\n            addConv: false,                     //to handle add conversation pop up event\r\n            addSuccess: false,                  //for displaying successful/error message when trying to start conversation\r\n\t\t\tuser: this.props.user,              //firebase user object\r\n            messages: [],                       //the messages in the current conversation\r\n            messageUnsubscribe: null,           //reference to the message docs (used to detach listener, preventing memory leak)\r\n            conversationRef: null,\r\n            databaseRef: this.props.database,   //firestore reference for all read/write operations\r\n            fetchTimestamp : null,               //keep track of when the messages were first fetched, so new messages can be pulled in after that\r\n            membersToAdd: [],\r\n            initLoadMessages : 50,\r\n            partialLoad : false,\r\n            lastLoadedDocTimestamp: null,\r\n            nextLoad: 100,\r\n    \r\n\r\n         }\r\n    }\r\n\r\n   \r\n    componentDidMount(){\r\n      //get chat info here\r\n    \r\n        //get contacts once\r\n\r\n        //listen for new messages\r\n        \r\n        //listen for contact changes\r\n        var conversations = []\r\n        var databaseRef = this.state.databaseRef\r\n        databaseRef.collection(\"users\").doc(this.state.user.uid)\r\n            .onSnapshot((doc) => {\r\n               \r\n                // get callback promises and store it in an array\r\n                var promises = [] \r\n\r\n                doc.data().conversations.forEach((conversationRef) => {\r\n                    promises.push(databaseRef.collection('conversations').doc(conversationRef.id).get())   \r\n                });\r\n                //resolve. once all the data\r\n                console.log(promises)\r\n                Promise.all(promises).then((docs) => {\r\n                    conversations = []\r\n                    docs.forEach((doc) => conversations.push(({cid: doc.id, \r\n                                                                members: doc.data().members, \r\n                                                                lastMessage: doc.data().lastMessage.message,\r\n                                                                lastActive: doc.data().lastActive.toDate()})))\r\n                    conversations.sort((a,b) => (a.lastActive > b.lastActive) ? 1 : ((b.lastActive > a.lastActive) ? -1 : 0))\r\n                    console.log(conversations)\r\n                    this.setState({conversations: conversations})\r\n\r\n                })\r\n            })\r\n\r\n    }\r\n\r\n    componentDidUpdate = (prevProps, prevState) => {\r\n        var elem = document.getElementById('message-area');\r\n        elem.scrollTop = elem.scrollHeight;\r\n        \r\n        if(!this.state.conversationRef) {\r\n            console.log('returning')\r\n            return\r\n        }\r\n\r\n        if(prevState.conversationRef !== this.state.conversationRef){\r\n\r\n            //unsubscribe/detach listener\r\n            if(prevState.messageUnsubscribe)\r\n            {\r\n                console.log('detaching')\r\n                prevState.messageUnsubscribe()\r\n\r\n            }\r\n                \r\n            var messageObjects = []\r\n            var databaseRef = this.state.databaseRef\r\n            var unsubscribe = databaseRef.collection(\"messages\").doc(this.state.conversationRef).collection(\"messageData\").orderBy(\"timeSent\").startAt(this.state.fetchTimestamp)\r\n                .onSnapshot((snapshot) => {\r\n                    console.log(snapshot.docs)\r\n\r\n                        snapshot.docChanges().forEach((change) => {\r\n                            if (change.type === \"added\") {\r\n                                var doc = change.doc\r\n                                let source = doc.metadata.hasPendingWrites ? 'Local' : 'Server'\r\n                                if (source === 'Server') {\r\n                                    this.setState({\r\n                                        messages: [...this.state.messages, \r\n                                                    {message: doc.data().message, \r\n                                                        timeSent: doc.data().timeSent.toDate(), uid: doc.data().uid, \r\n                                                        displayName: doc.data().displayName}],\r\n                                    })\r\n                                } else {\r\n                                // Do nothing, it's a local update so ignore it\r\n                                }\r\n                                \r\n                            }   \r\n                        })\r\n                    })\r\n\r\n            this.setState({messageUnsubscribe: unsubscribe})\r\n\r\n            //subscribe / add new listener\r\n            \r\n            \r\n        }\r\n\r\n    }\r\n    \r\n    componentWillUnmount = () => {\r\n        if(this.state.messageUnsubscribe)\r\n            this.state.messageUnsubscribe()\r\n    }\r\n\r\n    showMessages = (messagesRef) => {\r\n        //get messages and attach a listener to the specific message doc\r\n        //get the messages from messageData. order by \r\n        \r\n\r\n        if (!this.state.conversationRef && messagesRef === this.state.conversationRef) return  //dont download again\r\n        \r\n        //thru the conversationRef get the mid and access the messages limit to first 50 order by timestamp\r\n        //put query here and make a listener .onSnapshot ....\r\n        // var query = ...\r\n        // var databaseRef = this.state.databaseRef\r\n        // var messages = databaseRef.collection(\"messages\").doc(messagesRef).collection(\"messageData\")\r\n\r\n        // messages.orderBy(\"timeSent\", \"desc\").limit(50)\r\n        // .onSnapshot((querySnapshot) => {\r\n                \r\n        //         console.log(querySnapshot.docs[0].data().message) \r\n        //         //cycle through all the docs and store\r\n        \r\n        console.log('showing messsages')\r\n        var databaseRef = this.state.databaseRef\r\n        var messages = databaseRef.collection(\"messages\").doc(messagesRef).collection(\"messageData\")\r\n        if (!messages) return\r\n        var messageObjects = []\r\n        messages.orderBy(\"timeSent\", \"desc\").limit(this.state.initLoadMessages).get()\r\n            .then((querySnapshot) => {\r\n                if (querySnapshot.docs.length === 0){\r\n                    this.setState({conversationRef: messagesRef})\r\n                    return\r\n                } \r\n\r\n                for (let i = querySnapshot.docs.length - 1; i >= 0 ; i--) {\r\n                    var doc = querySnapshot.docs[i]\r\n                    messageObjects.push({message: doc.data().message, timeSent: doc.data().timeSent.toDate(), \r\n                        uid: doc.data().uid, displayName:doc.data().displayName})\r\n                }\r\n\r\n                this.setState({conversationRef: messagesRef, messages: messageObjects, \r\n                    fetchTimestamp: new Date(), lastLoadedDocTimestamp: messageObjects[0].timeSent, partialLoad: true})\r\n            })\r\n            .catch((err) => console.log(err))                    \r\n            \r\n        //this.setState({conversationRef: messagesRef}) \r\n        \r\n    }\r\n\r\n    loadMoreMessages = (e) => {\r\n\r\n        var messageObjects = this.state.messages.slice()\r\n            var databaseRef = this.state.databaseRef\r\n            databaseRef.collection(\"messages\").doc(this.state.conversationRef).collection(\"messageData\")\r\n                                            .orderBy(\"timeSent\", \"desc\")\r\n                                            .startAt(this.state.lastLoadedDocTimestamp)\r\n                                            .limit(this.state.nextLoad+1)\r\n                                            .get()\r\n                .then((snapshot) => {\r\n                    console.log(snapshot.docs)\r\n                        if(snapshot.docs.length === 1)\r\n                            this.setState({partialLoad: false})\r\n\r\n                        \r\n                        for (let i = 1; i < snapshot.docs.length ; i++) {\r\n                            var doc = snapshot.docs[i]\r\n                            console.log(doc.data())\r\n                            messageObjects.unshift({message: doc.data().message, timeSent: doc.data().timeSent.toDate(), \r\n                                uid: doc.data().uid, displayName: doc.data().displayName})\r\n                        }\r\n                        this.setState({messages: messageObjects, lastLoadedDocTimestamp: messageObjects[0].timeSent})\r\n                    })\r\n\r\n\r\n    }\r\n    sendMessage = (e) => {\r\n        //this.state.socket.emit('private message', {to: 'john', data: message})\r\n\r\n        if(!this.state.conversationRef) return //if no conversation is selected\r\n\r\n        var messageRef = this.state.conversationRef\r\n        var databaseRef = this.state.databaseRef\r\n        e.preventDefault()\r\n        const input = document.getElementById('message-input')\r\n        if (input.value === \"\") return\r\n        var timestamp = new Date()\r\n        const messageData = {message: input.value, uid: this.state.user.uid, timeSent: timestamp}\r\n        input.value = ''\r\n        this.setState({messages: [...this.state.messages, messageData]})\r\n\r\n        databaseRef.collection(\"messages\").doc(messageRef).collection(\"messageData\").add({\r\n            message: messageData.message,\r\n            timeSent: timestamp,\r\n            uid: this.state.user.uid,\r\n            displayName: this.state.user.displayName                                   \r\n        })\r\n\t\t\t\r\n    }\r\n\r\n\t\r\n    \r\n\r\n    showAddConvPopUp = () => {\r\n        this.setState({addConv: !this.state.addConv, membersToAdd: []},)\r\n    }\r\n\r\n    handleAddEmail = (e) => {\r\n        \r\n        var databaseRef = this.state.databaseRef\r\n        var target = document.getElementById('popup-emailInput')\r\n        var emailEntered = target.value\r\n        if(!emailEntered) return \r\n        target.value = \"\"\r\n\r\n        var obj = this.state.membersToAdd.find(member => member.email === emailEntered)\r\n        if (obj || emailEntered === this.state.user.email) return // user already added\r\n\r\n        var cRef = null\r\n        this.state.databaseRef.collection('users').where('email', '==', emailEntered).get()\r\n                            .then( (snapshot) => {\r\n                                var doc = snapshot.docs[0]\r\n                                if (doc){\r\n                                    this.setState({membersToAdd: [...this.state.membersToAdd, {displayName: doc.data().displayName, \r\n                                                                                              email: emailEntered,\r\n                                                                                              uid: doc.id}]})\r\n                                }\r\n\r\n                            })\r\n    }\r\n\r\n    handleAddConversation = (e) => {\r\n        //look for user emails here\r\n        if(this.state.membersToAdd.length === 0) return   \r\n       // create a new conversation\r\n        const membersToAdd = [...this.state.membersToAdd,\r\n                            {displayName: this.state.user.displayName,\r\n                            uid: this.state.user.uid,\r\n                            email: this.state.user.email}]\r\n                        \r\n        const databaseRef = this.state.databaseRef\r\n        databaseRef.collection(\"conversations\").add({\r\n            members: membersToAdd,\r\n            lastActive:  new Date(),\r\n            lastMessage: \"\"\r\n        })\r\n            .then((conversationRef) => {\r\n                membersToAdd.forEach((member) => {\r\n                    databaseRef.collection('users').doc(member.uid).update({\r\n                        conversations: this.props.firebaseRef.firestore.FieldValue.arrayUnion(conversationRef)\t\t\t\t\t\t\t\t\r\n                    })\r\n                })\r\n                if(this.state.messageUnsubscribe)\r\n                    this.state.messageUnsubscribe()\r\n                this.setState({addConv: !this.state.addConv, messages: []})\r\n                this.showMessages(conversationRef.id)\r\n            })\r\n            .catch(function(error) {\r\n                console.error(\"Error writing document: \", error);\r\n            })\r\n            \r\n        \r\n        \r\n        \r\n        \r\n\r\n        //update both the client and user id to include the specific cid returned, \r\n        //use local variable cID and write to create ref \r\n        // do the following once the user clicks on the add conversation button\r\n        \r\n        \r\n       \r\n                           \r\n    }\r\n\r\n    render() { \r\n        const addSuccessLabel = <Label> </Label>\r\n        const displayMembers = this.state.membersToAdd.map((member) => <Segment key={member.uid}> {member.email} ({member.displayName})</Segment>)\r\n        const popup = this.state.addConv ? \r\n            <div id='popup-container'>\r\n                <div id='popup-addConversation'>\r\n                    <div id='popup-title'>\r\n                        <Header size='large' inverted>\r\n                            Enter user email \r\n                        </Header>\r\n                        <Icon inverted size='big' id='popup-icon' name='close' onClick={this.showAddConvPopUp}></Icon>\r\n                    </div>\r\n                    <Divider/>\r\n                    <Form onSubmit={this.handleAddEmail}>\r\n                        <Input id='popup-emailInput' style={{width: '100%'}} \r\n                        icon={<Icon name='add user' circular link onClick={this.handleAddEmail} />} \r\n                        placeholder='Add by Email...'/>\r\n                    </Form>\r\n                    <SegmentGroup id='popup-members'>\r\n                        {displayMembers}\r\n                    </SegmentGroup>\r\n                    <Divider/>\r\n                    <Segment id='popup-start' onClick={this.handleAddConversation}>\r\n                        Start Conversation\r\n                    </Segment>\r\n                </div>\r\n            </div>\r\n            : null\r\n            \r\n\r\n        const uid = this.state.user.uid\r\n        var messages = []\r\n        \r\n        for (let i = 0; i < this.state.messages.length ; i++) {\r\n            var messageObject = this.state.messages[i]\r\n            var alignment = (uid === messageObject.uid) ? 'r' : 'l'\r\n            \r\n            var showDisplayName = (i === 0  || this.state.messages[i - 1].uid !== messageObject.uid) && alignment !== 'r'\r\n            console.log(showDisplayName, messageObject)\r\n            messages.push(<Message key={i} alignment={alignment} sentBy={messageObject.displayName} \r\n                timeSent={messageObject.timeSent} showDisplayName={showDisplayName} message={messageObject.message}/>)\r\n            \r\n        }\r\n        \r\n        // this.state.messages.map((messageObject, index) => {\r\n        //     var alignment = (uid === messageObject.uid) ? 'r' : 'l'\r\n        //     return(<Message key={index} alignment={alignment} sentBy={messageObject.displayName} \r\n        //         timeSent={messageObject.timeSent} message={messageObject.message}/>)\r\n\t\t// })\r\n        \r\n       \r\n        if(this.state.partialLoad)\r\n            messages = <div>\r\n                        <Button onClick={this.loadMoreMessages}>Load More Messages</Button>\r\n                        {messages}\r\n                      </div>\r\n        \r\n        //generate conversation cards\r\n\r\n\t\tconst conversation = this.state.conversations.map((conversation) => {\r\n            const members = conversation.members.map((member) => {if(member.uid !== uid) return(<div key={member.displayName}>{member.displayName}</div>)})\r\n            var icon = 'user'\r\n            if (conversation.members.length > 2) icon = 'users'\r\n\r\n            return(<ConversationCard key={conversation.cid} selected={this.state.conversationRef === conversation.cid}\r\n                                     icon={icon} members={members} lastMessage={conversation.lastMessage} cid={conversation.cid} \r\n                                     handleClick={this.showMessages}/>)\r\n\t\t})\r\n\r\n\t\treturn(\r\n\t\t\t<div id='chat-grid'>\r\n                {popup}\r\n\t\t\t\t<div id='chat-conversation-sidebar'>\r\n\t\t\t\t\t<div id='conversation-title-container'>\r\n\t\t\t\t\t\t<Header color='teal' as='h4' textAlign='center'>\r\n\t\t\t\t\t\t\t<Image src={appLogo} />\r\n\t\t\t\t\t\t\t\tNode Messenger\r\n\t\t\t\t\t\t\t</Header>\r\n\t\t\t\t\t\t<Divider/>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t\r\n\t\t\t\t\t\t<div id='conversation-conversationList'>\r\n\t\t\t\t\t\t\t{conversation}\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t<div id='conversation-usercontrols'>\r\n\t\t\t\t\t\t<Divider id='conversation-divider'/>\r\n\t\t\t\t\t\t\t<div id='conversation-signout' onClick={this.props.onSignOut}>\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tSign Out\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t<div id='conversation-addConv' onClick={this.showAddConvPopUp}>\r\n\t\t\t\t\t\t\t\t<Icon inverted size='big' name='add user'/>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\r\n\t\t\t\t</div>\r\n\t\t\t\t<div id='chat-divider'/>\r\n\t\t\t\t<div id='chat-message-box'>\r\n\t\t\t\t\t<div id='message-area'> \r\n\t\t\t\t\t\t{messages}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div>\r\n\t\t\t\t\t<Form id='message-box' autoComplete='off' onSubmit={this.sendMessage}>\r\n\t\t\t\t\t\t<Input id='message-input' fluid icon={<Icon name='send' color='blue' onClick={this.sendMessage} circular link />} placeholder='Type a message' />\r\n\t\t\t\t\t</Form>  \r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\r\n\t\t\t</div>\r\n\t\t)\r\n    }\r\n}\r\n \r\nexport default Chat","import React, { Component } from 'react'\r\nimport logo from './res/logo.svg'\r\nimport appLogo from './res/applogo.svg'\r\nimport './App.css'\r\nimport Login from './components/Login/login'\r\nimport Chat from './components/Chat/chat'\r\n\r\n\r\nconst LoadingScreen = () => (\r\n\t<header className=\"App-header\">\r\n\t\t<div>\r\n\t\t\t<div>\r\n\t\t\t\t<img alt=\"Logo\" src={appLogo} className=\"AppLogo\"/>\r\n\t\t\t</div>\r\n\t\t\t<div>\r\n\t\t\t\t<img src={logo} className=\"Loading-logo\" alt=\"Loading\" />\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t</header>\r\n)\r\n\r\n/**\r\n * App component\r\n */\r\nclass App extends Component {\r\n\r\n\tconstructor(props){\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\tauthChecked: false,\r\n\t\t\tuser: null,\r\n\t\t\tdatabaseRef: this.props.firebase.firestore()\r\n\t\t}\r\n\t\t\r\n\t\t//Disable deprecated features:\r\n\t\tthis.state.databaseRef.settings({timestampsInSnapshots: true})\r\n  \t}\r\n\t\r\n\tcomponentDidMount(){\r\n\t\tthis.props.firebase.auth().onAuthStateChanged((user) => {\r\n\t\t\tconsole.log('authchecked')\r\n\t\t\tthis.setState({user: user, authChecked: true})\r\n\t\t})\r\n\t}\r\n\t/*\r\n\tsignIn = (email, password) => {\r\n\t\t// this.props.firebase.auth().setPersistence(this.props.firebase.auth.Auth.Persistence.LOCAL)\r\n\t\t// \t\t\t.then((userData) => {\r\n\t\t\t\t\t\r\n\t\t// \t\t\t\treturn this.props.firebase.auth().signInWithEmailAndPassword(email, password);\r\n\t\t// \t\t\t})\r\n\t\t// \t\t\t.catch((error) => {\r\n\t\t// \t\t\t\tconsole.log(error)\r\n\t\t// \t\t\t})\r\n\r\n\t\t// this.setState({showScene:'messenger'})\r\n\r\n\t\t\r\n\t  }\r\n\t  */\r\n\thandleSignIn = (email, password) => {\r\n\t\tthis.props.firebase.auth().signInWithEmailAndPassword(email, password)\r\n\t\t\t\t\t.then((userData) => {\r\n\t\t\t\t\t//switch scenes, render it\r\n\t\t\t\t\t//get user's chat data\r\n\t\t\t\t\t//render updated scene \r\n\t\t\t\t\t\tconsole.log(userData)\r\n\t\t\t\t\t\tthis.signIn(email, password)\r\n\t\t\t\t\t})\r\n\t\t\t\t\t.catch((error) =>{console.log(error)})\r\n\r\n\t\t/*\r\n\t\tTODO: Implement ERROR CODES and render it on screen\r\n\t\tRefer DOCS for error codes\r\n\t\thttps://firebase.google.com/docs/reference/js/firebase.auth.Auth?authuser=0#signInWithEmailAndPassword\r\n\t\t*/\r\n\t}\r\n\r\n\t//Sign-Up process automatically signs in user \r\n\thandleSignUp = (email, password, userName) => {\r\n\t\tthis.props.firebase.auth().createUserWithEmailAndPassword(email, password)\r\n\t\t\t\t\t.then((userData) => {\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\r\n\t\t\t\t\t\t//update user data on database\r\n\t\t\t\t\t\tuserData.user.updateProfile({\r\n\t\t\t\t\t\t\tdisplayName: userName\r\n\t\t\t\t\t\t}).then().catch((error) => console.log(error))\r\n\r\n\t\t\t\t\t\tvar database = this.state.databaseRef\r\n\t\t\t\t\t\tdatabase.collection('users').doc(userData.user.uid).set({\r\n\t\t\t\t\t\t\tdisplayName: userName,\r\n                            email: email,\r\n                            conversations: []\r\n\t\t\t\t\t\t}).then().catch((error) => console.log(error))\r\n\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t})\r\n\r\n\t\t\t\t\t.catch((error) =>{console.log(error)})\r\n\r\n\r\n\t}\r\n\r\n\thandleSignOut = () => {\r\n\t\tconsole.log('signing out')\r\n\t\tthis.props.firebase.auth().signOut().then(function() {\r\n\t\t\t// Sign-out successful.\r\n\t\t  }).catch(function(error) {\r\n\t\t\t// An error happened.\r\n\t\t  })\r\n\t}\r\n\r\n\trender() {\r\n\r\n\t\tconst user = this.state.user\r\n\t\tvar scene;\r\n\t\tif(!this.state.authChecked)\r\n\t\t\tscene = <LoadingScreen/>\r\n\t\telse\r\n\t\t\tscene = user ?  <Chat firebaseRef={this.props.firebase} database={this.state.databaseRef} onSignOut={this.handleSignOut} user={user} /> : <Login onSignIn={this.handleSignIn} onSignUp={this.handleSignUp}/>\r\n\t\t\t\r\n\t\t\r\n\t\t\t\r\n\t\treturn (\r\n\t\t\t<div className=\"App\">\r\n\t\t\t\t{scene}\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n}\r\n\r\nexport default App\r\n","/***** REACT GENERATE MODULE *****/\r\n\r\n\r\n// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n\r\n              // Execute callback\r\n              if (config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport 'semantic-ui-css/semantic.min.css'\r\nimport App from './App'\r\nimport * as serviceWorker from './serviceWorker'\r\nimport * as firebase from 'firebase'\r\n      // Initialize Firebase\r\n\r\n\r\nvar config = {\r\n    apiKey: \"AIzaSyDiUZegEvS10yKuSLMS0V2ZurdbJXyIYP4\",\r\n    authDomain: \"nodem-2edaa.firebaseapp.com\",\r\n    databaseURL: \"https://nodem-2edaa.firebaseio.com\",\r\n    projectId: \"nodem-2edaa\",\r\n    storageBucket: \"nodem-2edaa.appspot.com\",\r\n    messagingSenderId: \"33137095871\"\r\n}\r\nfirebase.initializeApp(config)\r\n\r\nReactDOM.render(<App firebase={firebase}/>, document.getElementById('root'))\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister()","module.exports = __webpack_public_path__ + \"static/media/applogo.f8c49c79.svg\";"],"sourceRoot":""}